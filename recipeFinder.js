const recipeForm = document.querySelector('#block-e7067866bffebea1963a form');
const recipes = {
    winter: [
        { recipeName: 'peanut butter > coconut oil > almond flour', link: 'http://cityhopp.com/recipe-1-to-copy-from-drainer' },
        { recipeName: 'coconut oil > peanut butter > almond flour', link: 'http://cityhopp.com/new-page-33' },
        { recipeName: 'peanut butter > almond butter > almond flour', link: 'http://cityhopp.com/new-page-80' }
    ],
    summer: [
        { recipeName: 'peanut butter > almond flour > jicama', link: 'http://cityhopp.com/new-page-37' },
        { recipeName: 'peanut butter > almond flour > almond butter', link: 'http://cityhopp.com/recipe-5-to-copy' }
    ],
    fall: [
        { recipeName: 'almond flour > jicama > peanut butter', link: 'http://cityhopp.com/recipe-6-to-copy' },
        { recipeName: 'chia seeds > peanut butter > coconut oil', link: 'http://google.com' },
        { recipeName: 'chia seeds > peanut butter > jicama', link: '' },
        { recipeName: 'pumpkin > coconut oil > eggs', link: '' },
        { recipeName: 'peanut butter > pumpkin > almond flour', link: '' }, 
        { recipeName: 'coconut oil > almond flour > chia seeds', link: '' }, 
        { recipeName: 'coconut oil > peanut butter > pumpkin', link: '' }, 
        { recipeName: 'eggs > almond butter > almond flour', link: '' }, 
        { recipeName: 'jicama > almond flour > chia seeds', link: '' }, 
        { recipeName: 'almond flour > chia seeds > eggs', link: '' },
        { recipeName: 'jicama > almond flour > almond butter', link: '' }
    ]
}

// Function that generate combination of arr element

var combinationGen = function(a, min) {
    var fn = function(n, src, got, all) {
        if (n == 0) {
            if (got.length > 0) {
                all[all.length] = got;
            }
            return;
        }
        for (var j = 0; j < src.length; j++) {
            fn(n - 1, src.slice(j + 1), got.concat([src[j]]), all);
        }
        return;
    }
    var all = [];
    for (var i = min; i < a.length; i++) {
        fn(i, a, [], all);
    }
    all.push(a);
    return all;
}
  
recipeForm.addEventListener('submit', (e) => {
    // Preventing from refereshing on submit
    e.preventDefault();
    // Getting the form data
    const formData = new FormData(recipeForm);
    const ingredientArr = formData.getAll('checkbox-yui_3_17_2_1_1570665796905_64786-field');
    const seasonArr = formData.getAll('checkbox-yui_3_17_2_1_1570665796905_68584-field');
    let idx = 0;
    let markup;
    let totalRecipes = 0;
    // looping through recipe object and getting data of the clicked season. 
    for (let key in recipes) {
        if (!seasonArr[idx]) break; // Checking if user clicked more then one season or not, if not then stop the loop function when unclicked season arrive
        const seasonName = seasonArr[idx].split(' ')[0].toLowerCase();  // getting the first word of the season text from the clicked season
        const seasonRecipes = recipes[seasonName] // getting the clicked season's data [{recipeName:'', link:''}, {recipeName:'', link:''}]
        idx += 1;
        let seasonRecipeTotal = 0;
        // Showing the season heading
        $(`#page-5da34e21519bf62664dede7b .recipe-container .${seasonName} .season-heading`).css('display', 'block');

        seasonRecipes.forEach(recipe => {
            // Checking if the ingredient are present in the recipe data structure
            let isIngredientPresent;

            if (ingredientArr.length === 3) {
                isIngredientPresent = ingredientArr.every(ingredient => recipe.recipeName.split(' > ').includes(ingredient));
            } else { // if ingredient choose by user is more than 3
                const ingredientsCombinationArr = combinationGen(ingredientArr, 3); // combinationGen(['a','b','c','d'], 3) [[...], [...], [...], [...], ..., ['a','b','c','d']]
                delete ingredientsCombinationArr[ingredientsCombinationArr.length - 1];
                
                // Checking the current season recipe have the user ingredient arr recipes ( in the combination generated by generator ) or not
                isIngredientPresent = recipe.recipeName.split(' > ').every(recipeIngredient => {
                    
                    for(let ingredientArr of ingredientsCombinationArr){ // ingredientArr [...]
                        for (let ingredient of ingredientArr){
                            
                        }
                    }
                })

                isIngredientPresent = ingredientArr.every(ingredient => recipe.recipeName.split(' > ').includes(ingredient));
            }

            // If present then add the recipe markup and add 1 to season total recipe
            if (isIngredientPresent) {
                markup = `<div class="recipe"><a href="${recipe.link}">${recipe.recipeName}</a></div>`
                seasonRecipeTotal += 1;
            } else {
                markup = "";
            }

            document.querySelector(`#page-5da34e21519bf62664dede7b .recipe-container .${seasonName} .recipes`).insertAdjacentHTML('beforeend', markup);
        })
        if (seasonRecipeTotal === 0) {
            document.querySelector(`#page-5da34e21519bf62664dede7b .recipe-container .${seasonName} .recipes`).insertAdjacentHTML('afterbegin', `<p style="font-style:italic">Sorry No recipe found in ${seasonName}! </p>`);
        }

        totalRecipes += seasonRecipeTotal;
    }
});
  